---
const {
    textboxPlaceholder="Type message",
    textboxLabel="Type message to send:",
    colorpickerLabel="Change color",
    outgoingLabel="Outgoing messages:",
    sendLabel="Send to chat",
    openLabel="Open",
    closeLabel="Close"
} = Astro.props;
---
<style>
    button {
        color: var(--sl-color-text-invert);
        border-radius: 0.25rem;
    }
</style>

<div class="flex flex-col gap-y-4 ">
    <label for="incoming">{textboxLabel}</label>
    <textarea
        class="border border-black dark:border-white"
        id="incoming"
        rows="5"
        placeholder={textboxPlaceholder}
        autocomplete="on"
        spellcheck="true"
        wrap="soft"
    ></textarea>
    <section class="flex flex-wrap gap-2">
        <button class="p-2 !m-0 cursor-pointer bg-kite-primary-color hover:brightness-110 dark:hover:brightness-75" id="send">{sendLabel}</button>
        <button class="p-2 !m-0 cursor-pointer bg-kite-primary-color hover:brightness-110 dark:hover:brightness-75" id="open">{openLabel}</button>
        <button class="p-2 !m-0 cursor-pointer bg-kite-primary-color hover:brightness-110 dark:hover:brightness-75" id="close">{closeLabel}</button>
    </section>
    <label for="colorpicker"
        >{colorpickerLabel}: <input type="color" id="colorpicker"
    /></label>
    <label for="outgoing">{outgoingLabel}</label>
    <section id="outgoing"></section>
</div>

<script is:inline>
    async function loadModules() {
        try {
            return await import("__BACKEND_PACKAGE_IMPORT__");
        } catch (error) {
            console.error('Error loading modules:', error);
        }
    }

    loadModules().then(({ isPlaintextMsg, prettyBytes }) => {
        const requiredElement = (
            selector
        ) => {
            const el = document.querySelector(selector);
            if (!el) throw new Error(`Element '${selector}' is missing`);
            return el;
        };
        
        const kiteChat = requiredElement('kite-chat');
        const textarea = requiredElement('textarea');
        const sendToChatBtn = requiredElement('#send');
        const openBtn = requiredElement('#open');
        const closeBtn = requiredElement('#close');
        const colorpicker = requiredElement('#colorpicker');
        const outgoing = requiredElement('section#outgoing');
        const root = document.documentElement;
        const fileInfo = file => (file.name + ' ' + prettyBytes(file.size));
        
        //BUG! astro error when using template string
        kiteChat.addEventListener(
            'kite-chat.send',
            e => {
                const payload = e.detail;
                const message = isPlaintextMsg(payload) ? payload.text : fileInfo(payload.file);
                outgoing.insertAdjacentHTML(
                'beforeend',
                '<p>'+ payload?.timestamp?.toISOString() + ':' + message + '</p>'
                );
            }
        );
        
        
        sendToChatBtn.addEventListener('click', () =>
            kiteChat.appendMsg({text: textarea.value})
        );
        openBtn.addEventListener('click', () => kiteChat.show());
        closeBtn.addEventListener('click', () => kiteChat.hide());
        colorpicker.addEventListener('input', (e) => {
            const target = e.target;
            const color = target.value;
            root.style.setProperty('--kite-primary-color', color);
        });
        colorpicker.value = getComputedStyle(document.documentElement)
            .getPropertyValue('--kite-primary-color');
    });
</script>