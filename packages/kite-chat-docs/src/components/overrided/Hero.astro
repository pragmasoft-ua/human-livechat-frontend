---
import { PAGE_TITLE_ID } from './constants';
import type { Props } from '@astrojs/starlight/props';
import CallToAction from '@astrojs/starlight/components/CallToAction.astro';

const { data } = Astro.props.entry;
const { title = data.title, tagline, image, video, actions = [] } = data.hero || {};

const imageAttrs = {
	loading: 'lazy' as const,
	decoding: 'async' as const,
	width: 350,
	height: 550,
	alt: image?.alt || '',
};
---

<div class="hero">
	<div class="image">
	{
		image?.light && (
		<picture>
			{
				image?.dark && (<source srcset={image.dark.src} type="image/png" media="(prefers-color-scheme: dark)" />)
			}
			<source srcset={image.light.src} type="image/png" media="(prefers-color-scheme: light)" />
			<img src={image.light.src} {...imageAttrs} />
		</picture>
		)
	}
	</div>
	<div class="video">
		{
			video?.light && (<video class="light" src={video.light.src} autoplay muted loop poster={image?.light?.src} />)
		}
		{
			video?.dark && (<video class="dark" src={video.dark.src} autoplay muted loop poster={image?.dark?.src}/>)
		}
	</div>
	<div class="sl-flex stack">
		<div class="sl-flex copy">
			<h1 id={PAGE_TITLE_ID} data-page-title set:html={title} />
			{tagline && <div class="tagline" set:html={tagline} />}
		</div>
		{
			actions.length > 0 && (
				<div class="sl-flex actions">
					{actions.map(({ text, ...attrs }) => (
						<CallToAction {...attrs} set:html={text} />
					))}
				</div>
			)
		}
	</div>
</div>

<script is:inline>
	window.addEventListener('theme-change', (event) => {
		heroMediaChange(event.detail.theme);
	})

	const hero = document.querySelector('.hero');

	const dark_p = hero.querySelector('picture source[media="(prefers-color-scheme: dark)"]');
	const light_p = hero.querySelector('picture source[media="(prefers-color-scheme: light)"]');

	const dark_v = hero.querySelector('video.dark');
	const light_v = hero.querySelector('video.light');

	const heroMediaChange = (mode) => {
		dark_p && (dark_p.media = (mode === 'dark') ? 'all' : 'none');
		light_p && (light_p.media = (mode === 'light') ? 'all' : 'none');
		dark_v && (dark_v.hidden = light_v && (mode !== 'dark'));
		light_v && (light_v.hidden = dark_v && (mode !== 'light'));
	};   
</script>

<style>
	.hero {
		display: grid;
		align-items: center;
		gap: 1rem;
		padding-bottom: 1rem;
	}

	.hero > .image,
	.hero > .video {
		object-fit: contain;
		margin-inline: auto;
	}

	.image img,
	.video video {
		width: 100%;
		height: auto;
	}

	.stack {
		flex-direction: column;
		gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
		text-align: center;
	}

	.copy {
		flex-direction: column;
		gap: 1rem;
		align-items: center;
	}

	.copy > * {
		max-width: 50ch;
	}

	h1 {
		font-size: clamp(var(--sl-text-3xl), calc(0.25rem + 5vw), var(--sl-text-6xl));
		line-height: var(--sl-line-height-headings);
		font-weight: 600;
		color: var(--sl-color-white);
	}

	.tagline {
		font-size: clamp(var(--sl-text-base), calc(0.0625rem + 2vw), var(--sl-text-xl));
		color: var(--sl-color-gray-2);
	}

	.actions {
		gap: 1rem 2rem;
		flex-wrap: wrap;
		justify-content: center;
	}

	@media (min-width: 50rem) {
		.hero {
			grid-template-columns: 7fr 4fr;
			gap: 3%;
			padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
		}

		.hero > .image, 
		.hero > .video {
			order: 2;
		}

		.stack {
			text-align: start;
		}

		.copy {
			align-items: flex-start;
		}

		.actions {
			justify-content: flex-start;
		}
	}

	.hero > .image {
		display: none;
	}

	@media (prefers-reduced-motion: reduce) {
		.hero > .image {
			display: initial;
		}

		.hero > .video {
			display: none;
		}
	}
</style>