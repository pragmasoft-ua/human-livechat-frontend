---
import type { Props } from '@astrojs/starlight/props';
import Default from '@astrojs/starlight/components/ThemeProvider.astro';
---

<Default {...Astro.props}><slot /></Default>

{/* This is intentionally inlined to avoid FOUC. */}
<script is:inline>
	window.StarlightThemeProvider = (() => {
		const storedTheme =
			typeof localStorage !== 'undefined' && localStorage.getItem('starlight-theme');
		const prefers = window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
		const theme = storedTheme || prefers;
		document.documentElement.dataset.theme = theme === 'light' ? 'light' : 'dark';

		return {
			updatePickers(theme = storedTheme || 'auto') {
				document.querySelectorAll('starlight-theme-select').forEach((picker) => {
					const select = picker.querySelector('select');
					if (select) select.value = theme;
					/** @type {HTMLTemplateElement | null} */
					const tmpl = document.querySelector(`#theme-icons`);
					const newIcon = tmpl && tmpl.content.querySelector('.' + theme);
					if (newIcon) {
						const oldIcon = picker.querySelector('svg.label-icon');
						if (oldIcon) {
							oldIcon.replaceChildren(...newIcon.cloneNode(true).childNodes);
						}
					}
				});

				window.dispatchEvent(new CustomEvent('theme-change', {
					detail: { theme: theme === 'auto' ? prefers : theme },
				}));
			},
		};
	})();
</script>